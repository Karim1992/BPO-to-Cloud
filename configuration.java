/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test1;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import static test1.RowHeaderExample.bouton_criteria;
import static test1.RowHeaderExample.dm;
import static test1.RowHeaderExample.table;
import static test1.Test1.motDePasse;
import static test1.Test1.url;
import static test1.Test1.utilisateur;

/**
 *
 * @author zarour
 */
public class configuration extends javax.swing.JFrame {
Connection connexion = null;
DefaultTableModel table_model = new DefaultTableModel();            

    /**
     * Creates new form configuration
     */
    DefaultListModel<String> model_list_rule;
    DefaultTableModel table_model_final_weights, table_score;
    JScrollPane scroll;
    String[] titre_colonnes = { "offer","security", "compliance","cost", "runtime"};    
    DecimalFormat format_nbr = new java.text.DecimalFormat("0.##");
    Object val_ofr_act1 [] [] = new Object [3][5];
    Object val_ofr_act2 [] [] = new Object [3][5];
    Object val_ofr_act3 [] [] = new Object [3][5];
    Object val_ofr_act4 [] [] = new Object [3][5];
    Modele_table m_act1, m_act2, m_act3, m_act4;

    public configuration() {
        initComponents();
        // création d'un model (contenant les donées) pour la liste des règles selectionnées pour une activité
        model_list_rule = new DefaultListModel<>();
        selected_rule.setModel(model_list_rule);
        this.setLocation(200, 0); 
      
    // charger dans le JComboBox list_rule tous les règles stockées dans la table Rule et dans les JComBox des offres Cloud toutes les offres de la BD    
        try {
    connexion = DriverManager.getConnection( url, utilisateur, motDePasse );
     /* Création de l'objet gérant les requêtes */
            System.out.println("exécution du bloc try");

Statement statement = connexion.createStatement();
/* Exécution d'une requête de lecture */
/*chargement des règles*/
ResultSet resultat = statement.executeQuery( "SELECT rule_name FROM Rule;" );
/* Récupération des données du résultat de la requête de lecture */
while ( resultat.next() ) {
   list_rule.addItem(resultat.getString( "rule_name" ));
}
/* chargement des offres Cloud */
resultat = statement.executeQuery( "SELECT offer_name FROM cloud_offer;" );
/* Récupération des données du résultat de la requête de lecture */
while ( resultat.next() ) {
   list_offer1.addItem(resultat.getString( "offer_name" ));
   list_offer2.addItem(resultat.getString( "offer_name" ));
   list_offer3.addItem(resultat.getString( "offer_name" ));
}
list_offer2.setSelectedIndex(1);
list_offer3.setSelectedIndex(2);


/* remplir le tableau des activités */

// table_model = (DefaultTableModel) table_activity_requirements.getModel();

resultat = statement.executeQuery( "SELECT name, confidentiality, integrity, availability FROM Activity;" );
/* Récupération des données du résultat de la requête de lecture */

while ( resultat.next() ) {
   String s1 = resultat.getString( "name" );
   String s2 = resultat.getString("confidentiality");
   String s3 = resultat.getString("Integrity");
   String s4 = resultat.getString("Availability");
   String [] ligne = new String[]{s1,s2,s3,s4};
   table_model.addRow(ligne);

    /* Traiter ici les valeurs récupérées. */
}
} catch ( SQLException e ) {
    /* Gérer les éventuelles erreurs ici */
                System.out.println("exception catch");

} finally {
    if ( connexion != null )
        try {
            /* Fermeture de la connexion */
            connexion.close();
            System.out.println("fermeture de la connexion");
        } catch ( SQLException ignore ) {
            /* Si une erreur survient lors de la fermeture, il suffit de l'ignorer. */
        }
} 
      



    }  // fin constructeur de la classe

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        list_offer1 = new javax.swing.JComboBox<>();
        cost1 = new javax.swing.JTextField();
        runtime1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        runtime2 = new javax.swing.JTextField();
        cost2 = new javax.swing.JTextField();
        list_offer2 = new javax.swing.JComboBox<>();
        cost3 = new javax.swing.JTextField();
        list_offer3 = new javax.swing.JComboBox<>();
        runtime3 = new javax.swing.JTextField();
        priority_cost = new javax.swing.JComboBox<>();
        priority_performance = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        list_rule = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selected_rule = new javax.swing.JList<>();
        priority_compliance = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        confidentiality = new javax.swing.JCheckBox();
        integrity = new javax.swing.JCheckBox();
        availability = new javax.swing.JCheckBox();
        non_repudiation = new javax.swing.JCheckBox();
        authenticity = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        priority_security = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        activity_name = new javax.swing.JTextField();
        list_activity = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        validate_requirements = new javax.swing.JButton();
        generate_priorities = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        list_activity2 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        file_name = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        list_rule1 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        selected_rule1 = new javax.swing.JList<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Business Process Outsourcing the Cloud");

        jTabbedPane2.setAutoscrolls(true);
        jTabbedPane2.setName(""); // NOI18N

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        list_offer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_offer1ActionPerformed(evt);
            }
        });

        cost1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cost1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\cost_tool .png")); // NOI18N
        jLabel3.setText("Cost");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\performance_tool.png")); // NOI18N
        jLabel4.setText("Runtime");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Select Cloud offers");

        cost2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cost2ActionPerformed(evt);
            }
        });

        cost3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cost3ActionPerformed(evt);
            }
        });

        priority_cost.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        priority_performance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(priority_cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cost1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(priority_performance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(runtime1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(list_offer1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(list_offer2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(list_offer3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cost2, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                            .addComponent(runtime2))
                        .addGap(52, 52, 52)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(runtime3)
                            .addComponent(cost3, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                        .addGap(21, 21, 21))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(102, 102, 102))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(cost1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priority_cost, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priority_performance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(runtime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(list_offer3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(list_offer2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(list_offer1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cost3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cost2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(runtime3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(runtime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        list_rule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_ruleActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_add.png")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\compliance_tool.png")); // NOI18N
        jLabel2.setText("Compliance");

        selected_rule.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(selected_rule);

        priority_compliance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(priority_compliance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(list_rule, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(priority_compliance))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(list_rule))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        confidentiality.setBackground(new java.awt.Color(204, 204, 204));
        confidentiality.setText("Confidentiality");
        confidentiality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confidentialityActionPerformed(evt);
            }
        });

        integrity.setBackground(new java.awt.Color(204, 204, 204));
        integrity.setText("Integrity");
        integrity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integrityActionPerformed(evt);
            }
        });

        availability.setBackground(new java.awt.Color(204, 204, 204));
        availability.setText("Availability");
        availability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityActionPerformed(evt);
            }
        });

        non_repudiation.setBackground(new java.awt.Color(204, 204, 204));
        non_repudiation.setText("Non repudiation");
        non_repudiation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                non_repudiationActionPerformed(evt);
            }
        });

        authenticity.setBackground(new java.awt.Color(204, 204, 204));
        authenticity.setText("Authenticity");
        authenticity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authenticityActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\security_tool.png")); // NOI18N
        jLabel1.setText("Security");

        priority_security.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(authenticity)
                    .addComponent(non_repudiation)
                    .addComponent(availability)
                    .addComponent(integrity)
                    .addComponent(confidentiality)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(priority_security, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(priority_security))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confidentiality)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(integrity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(availability)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(non_repudiation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authenticity)
                .addGap(24, 24, 24))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_ add_activity.png")); // NOI18N
        jButton3.setText("   Add Activity");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        list_activity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        list_activity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_activityMouseClicked(evt);
            }
        });
        list_activity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_activityActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Select Activity");

        validate_requirements.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        validate_requirements.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_save.png")); // NOI18N
        validate_requirements.setText("     Validate requirements");
        validate_requirements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validate_requirementsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activity_name, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(list_activity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(validate_requirements, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(activity_name, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(list_activity, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(validate_requirements, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        generate_priorities.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generate_priorities.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_weight.png")); // NOI18N
        generate_priorities.setText("  Generate weights of criteria");
        generate_priorities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_prioritiesActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_scores.png")); // NOI18N
        jButton1.setText("  Generate final scores");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_cloud.png")); // NOI18N
        jButton4.setText("  Generate values of offers");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "activity", "offer 1", "offer 2", "offer 3"
            }
        ));
        jScrollPane10.setViewportView(jTable8);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Security");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Cost");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "activity", "offer 1", "offer 2", "offer 3"
            }
        ));
        jScrollPane6.setViewportView(jTable4);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Runtime");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "activity", "offer 1", "offer 2", "offer 3"
            }
        ));
        jScrollPane8.setViewportView(jTable6);

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "activity", "offer 1", "offer 2", "offer 3"
            }
        ));
        jScrollPane9.setViewportView(jTable7);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Compliance");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Criteria", "Final weight"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "offer", "Security", "Compliance", "Cost", "Performance"
            }
        ));
        jScrollPane7.setViewportView(jTable5);

        list_activity2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        list_activity2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_activity2MouseClicked(evt);
            }
        });
        list_activity2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_activity2ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("Select Activity");

        jTable3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "activity", "offer 1", "offer 2", "offer 3"
            }
        ));
        jScrollPane5.setViewportView(jTable3);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setText("Final scores");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(list_activity2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addGap(169, 169, 169))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(485, 485, 485)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel8)
                        .addGap(189, 189, 189)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(124, 124, 124))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generate_priorities, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(172, 172, 172))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(generate_priorities, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(list_activity2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("BPO to Cloud", new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_autmation2.png"), jPanel6); // NOI18N

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Offer name", "Provider", "Type"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton6.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_upload.png")); // NOI18N
        jButton6.setText("  Upload CAIQ file");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Select threat");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Protection level");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Data breaches", "Insufficient identity", "Insecure interfaces", "System vulnerabilities", "Account hijacking", "Malicious insiders", "Advanced persisted threats", "Data loss", "Insufficient due diligence", "Abuse of Cloud services", "Denial of service", "Shared technology issues" }));

        jButton7.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_autmation2.png")); // NOI18N

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\security_tool.png")); // NOI18N
        jLabel20.setText("  Security");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(file_name, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18))
                        .addGap(54, 54, 54)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addGap(36, 36, 36)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(file_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_add.png")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        list_rule1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_rule1ActionPerformed(evt);
            }
        });

        selected_rule1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "HIPAA", "PCI-DSS", "ISO 27001", "SOX", "AICPAA", "ISO 23001", "FEDRAM" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(selected_rule1);

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Select rule");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\compliance_tool.png")); // NOI18N
        jLabel15.setText("  Compliance");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setText("Respected rules");

        jButton9.setText("Add new rule");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(list_rule1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel21))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(list_rule1))
                        .addGap(18, 18, 18)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_save.png")); // NOI18N
        jButton8.setText("   Add Cloud offer");

        jPanel11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Public", "Private" }));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Cloud offer name");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Provider");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Type");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, 124, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addGap(10, 10, 10))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Cloud offer management", new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_cloud.png"), jPanel5); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 985, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 708, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Rule management", new javax.swing.ImageIcon("C:\\Users\\zarour\\Desktop\\sitw\\doctorat\\images_doctorat\\icones\\icones BPO\\icones Java tool\\icon_rule.png"), jPanel12); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 990, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 756, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void list_rule1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_rule1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list_rule1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(jPanel1);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            file_name.setText( chooser.getSelectedFile().getName());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void list_activity2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_activity2ActionPerformed

        int i = list_activity2.getSelectedIndex();
        switch (i) {
            case 0:
            jTable5.setModel(m_act1);
            break;
            case 1:
            jTable5.setModel(m_act2);
            break;
            case 2:
            jTable5.setModel(m_act3);
            break;
            case 3:
            jTable5.setModel(m_act4);
            break;
        }
    }//GEN-LAST:event_list_activity2ActionPerformed

    private void list_activity2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_activity2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_list_activity2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        // calculer et remplir le security_risk de l'externalisation des chaque activité vers chaque offre Cloud **************
        int nbr_act = list_activity.getItemCount();
        String act_name = null;
        String ofr_name;
        int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;  // contiennent des 0 ou 1 selon  l'exposition d'une activité à une menace
        float o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12;  // contiennent des 0 ou 1 selon la protection de l'offre contre une menace
        float secu_risk;
        String [] list_selected_offer = new String [] {list_offer1.getSelectedItem().toString(), list_offer2.getSelectedItem().toString(), list_offer3.getSelectedItem().toString()};
        float matrice_comp[][] = new float[3][3];

        DefaultTableModel model_secu_risk = (DefaultTableModel) jTable8.getModel();
        try {
            connexion = DriverManager.getConnection( url, utilisateur, motDePasse );
            /* Création de l'objet gérant les requêtes */
            Statement statement = connexion.createStatement();

            for(int p=0; p<nbr_act; p++){

                act_name = list_activity.getItemAt(p);
                ResultSet  resultat = statement.executeQuery( "SELECT data_breaches, insufficient_identity, insecure_interfaces, system_vulnerabilities, account_hijacking, malicious_insiders, persisted_threats, data_loss, insufficient_diligence, abuse_nefarious_use, denial_service, shared_technology FROM activity WHERE name= '"+act_name+"';" );
                resultat.next();
                a1 = resultat.getInt( "data_breaches" );
                a2 = resultat.getInt( "insufficient_identity" );
                a3 = resultat.getInt( "insecure_interfaces" );
                a4 = resultat.getInt( "system_vulnerabilities" );
                a5 = resultat.getInt( "account_hijacking" );
                a6 = resultat.getInt( "malicious_insiders" );
                a7 = resultat.getInt( "persisted_threats" );
                a8 = resultat.getInt( "data_loss" );
                a9 = resultat.getInt( "insufficient_diligence" );
                a10 = resultat.getInt( "abuse_nefarious_use" );
                a11 = resultat.getInt( "denial_service" );
                a12 = resultat.getInt( "shared_technology" );

                model_secu_risk.addRow(new String[]{"","","",""});
                model_secu_risk.setValueAt(act_name, p, 0);
                for(int q=0; q<3; q++){
                    ofr_name = list_selected_offer[q];
                    resultat = statement.executeQuery( "SELECT data_breaches, insufficient_identity, insecure_interfaces, system_vulnerabilities, account_hijacking, malicious_insiders, persisted_threats, data_loss, insufficient_diligence, abuse_nefarious_use, denial_service, shared_technology FROM cloud_offer WHERE offer_name = '"+ofr_name+"';" );
                    resultat.next();

                    o1 = resultat.getFloat( "data_breaches" );
                    o2 = resultat.getFloat( "insufficient_identity" );
                    o3 = resultat.getFloat( "insecure_interfaces" );
                    o4 = resultat.getFloat( "system_vulnerabilities" );
                    o5 = resultat.getFloat( "account_hijacking" );
                    o6 = resultat.getFloat( "malicious_insiders" );
                    o7 = resultat.getFloat( "persisted_threats" );
                    o8 = resultat.getFloat( "data_loss" );
                    o9 = resultat.getFloat( "insufficient_diligence" );
                    o10 = resultat.getFloat( "abuse_nefarious_use" );
                    o11 = resultat.getFloat( "denial_service" );
                    o12 = resultat.getFloat( "shared_technology" );

                    secu_risk = a1*(1-o1) + a2*(1-o2)+ a3*(1-o3)+ a4*(1-o4)+ a5*(1-o5)+ a6*(1-o6)+ a7*(1-o7)+ a8*(1-o8)+ a9*(1-o9)+ a10*(1-o10)+ a11*(1-o11)+ a12*(1-o12);
                    model_secu_risk.setValueAt(secu_risk, p, q+1);

                }

            }
        }
        catch ( SQLException e ) {

            e.printStackTrace();

        }
        //*********************** fin calcul secu_risk **************************

        /******  scaling values of security risks *********/
        float max_value = (float) model_secu_risk.getValueAt(0, 1);

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                if((float)model_secu_risk.getValueAt(p, q) > max_value){     max_value = (float)model_secu_risk.getValueAt(p,q);       }
            }
        }

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                model_secu_risk.setValueAt(format_nbr.format(((float)model_secu_risk.getValueAt(p, q) * 8) / max_value), p, q);
            }
        }
        /*******      fin scaling security risk values ***********/

        // calculer et remplire le comp_risk de l'externalisation de chaque activité vers chaque offre Cloud **************
        DefaultTableModel model_comp_risk = (DefaultTableModel) jTable4.getModel();

        String list_required_rule[] = new String[8];
        String list_respected_rule[] = new String[20];

        int c1=0; // compteur pour parcourir la liste des required rules par chaque activité
        int c2=0; // compteur pour parcourir la liste des respected rules par chaque offre Cloud
        float comp_risk=0;
        String s1, s2;
        Boolean bool = false;

        try {
            connexion = DriverManager.getConnection( url, utilisateur, motDePasse );
            /* Création de l'objet gérant les requêtes */
            Statement statement = connexion.createStatement();

            for(int p=0; p<nbr_act; p++){     // parcourir les activités du processus (ajoutées par l'utilisateur

                act_name = list_activity.getItemAt(p);
                ResultSet  rslt_req_rule = statement.executeQuery( "SELECT rule_name FROM required_rule WHERE activity_name= '"+act_name+"';" );
                while (rslt_req_rule.next()){
                    list_required_rule[c1] = rslt_req_rule.getString("rule_name");
                    c1++;
                }
                model_comp_risk.addRow(new String[]{"","","",""});
                model_comp_risk.setValueAt(act_name, p, 0);
                for(int q=0; q<3; q++){       // parcourir les 3 offres Cloud séléctionné par l'utilisateur
                    ofr_name = list_selected_offer[q];
                    ResultSet rslt_resp_rule = statement.executeQuery( "SELECT rule_name FROM respected_rule WHERE offer_name = '"+ofr_name+"';" );
                    while (rslt_resp_rule.next()){
                        list_respected_rule[c2] = rslt_resp_rule.getString("rule_name");
                        c2++;
                    }

                    System.out.println("valeur c1 "+c1);
                    System.out.println("valeur c2 "+c2);

                    for(int g=0; g<c1; g++){
                        s1 = list_required_rule[g].toString();

                        for(int h=0; h<c2; h++){
                            s2 = list_respected_rule[h].toString();
                            if(s1.equals(s2)){
                                bool = true;
                            }
                        }
                        if(bool==false){
                            comp_risk++;
                        }
                        bool=false;
                    }
                    model_comp_risk.setValueAt(comp_risk, p, q+1);
                    comp_risk=0;
                    c2=0;
                }
                c1=0;
            }
        }
        catch ( SQLException e ) {

            e.printStackTrace();

        }
        //******************* fin calcul compliance risk ****************************

        /******  scaling values of compliance risk *********/
        max_value = (float) model_comp_risk.getValueAt(0, 1);

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                if((float)model_comp_risk.getValueAt(p, q) > max_value){     max_value = (float)model_comp_risk.getValueAt(p,q);       }
            }
        }

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                model_comp_risk.setValueAt(format_nbr.format(((float)model_comp_risk.getValueAt(p, q) * 8) / max_value), p, q);
            }
        }
        /*******      fin scaling compliance risk values ***********/

        //************** calculer et remplir l'estimation du coût et runtime de chaque activité pour chaque offre ********************

        float cost, runtime;
        DefaultTableModel model_table_cost = (DefaultTableModel) jTable7.getModel();
        DefaultTableModel model_table_runtime = (DefaultTableModel) jTable6.getModel();

        try {
            connexion = DriverManager.getConnection( url, utilisateur, motDePasse );
            /* Création de l'objet gérant les requêtes */
            Statement statement = connexion.createStatement();

            for(int p=0; p<nbr_act; p++){

                act_name = list_activity.getItemAt(p);

                model_table_cost.addRow(new String[]{"","","",""});
                model_table_cost.setValueAt(act_name, p, 0);
                model_table_runtime.addRow(new String[]{"","","",""});
                model_table_runtime.setValueAt(act_name, p, 0);

                for(int q=0; q<3; q++){
                    ofr_name = list_selected_offer[q];
                    ResultSet rslt_cost_runtime = statement.executeQuery( "SELECT cost, runtime FROM estimation_activity WHERE activity_name ='"+act_name+"' AND offer_name = '"+ofr_name+"';" );
                    rslt_cost_runtime.next();
                    cost = rslt_cost_runtime.getFloat("cost" );
                    runtime = rslt_cost_runtime.getFloat("runtime");

                    model_table_cost.setValueAt(cost, p, q+1);
                    model_table_runtime.setValueAt(runtime, p, q+1);

                }
            }
        }
        catch ( SQLException e ) {

            e.printStackTrace();

        }

        /******  scaling values of cost *********/
        max_value = (float) model_table_cost.getValueAt(0, 1);

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                if((float)model_table_cost.getValueAt(p, q) > max_value){     max_value = (float)model_table_cost.getValueAt(p,q);       }
            }
        }

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                model_table_cost.setValueAt(format_nbr.format(((float)model_table_cost.getValueAt(p, q) * 8) / max_value), p, q);
            }
        }
        /*******      fin scaling cost values ***********/

        /******  scaling values of performance *********/

        max_value = (float) model_table_runtime.getValueAt(0, 1);

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                if((float)model_table_runtime.getValueAt(p, q) > max_value){     max_value = (float)model_table_runtime.getValueAt(p,q);       }
            }
        }

        for(int p=0; p<nbr_act; p++){
            for(int q=1; q<4; q++){
                model_table_runtime.setValueAt(format_nbr.format(((float)model_table_runtime.getValueAt(p, q) * 8) / max_value), p, q);
            }
        }
        /******  fin scaling performance values *********/

        //*********************** fin calcul cost et runtime **************************

        /****** calcul valeures finales des offres pr chaque activité selon coût *******************************/

        for (int i=0; i<3; i++){
            matrice_comp[i][i]=1;
        }

        float val_ofr1;
        float val_ofr2;
        float val_ofr3;

        float diff, total1, total2, total3, avg_ofr1, avg_ofr2, avg_ofr3;

        for (int i=0; i<nbr_act;i++){
            val_ofr1 = Float.parseFloat(jTable7.getValueAt(i,1).toString().replace(',','.'));
            val_ofr2 = Float.parseFloat(jTable7.getValueAt(i,2).toString().replace(',','.'));
            val_ofr3 = Float.parseFloat(jTable7.getValueAt(i,3).toString().replace(',','.'));

            diff = val_ofr1 - val_ofr2;
            if (diff >= 0){
                matrice_comp[0][1] = (float)1/(diff+1);
                matrice_comp[1][0] =  diff+1;
                if (diff==0) { matrice_comp[1][0] = 1; matrice_comp[0][1] = 1;}
            }
            else{
                matrice_comp[0][1] = Math.abs(diff)+1;
                matrice_comp[1][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr1 - val_ofr3;
            if (diff >= 0){
                matrice_comp[0][2] = (float)1/(diff+1);
                matrice_comp[2][0] = diff+1;
                if (diff==0) { matrice_comp[0][2] = 1; matrice_comp[2][0] = 1;}
            }
            else{
                matrice_comp[0][2] = Math.abs(diff)+1;
                matrice_comp[2][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr2 - val_ofr3;
            if (diff >= 0){
                matrice_comp[1][2] = (float)1/(diff+1);
                matrice_comp[2][1] =  diff+1;
                if (diff==0) { matrice_comp[1][2] = 1; matrice_comp[2][1] = 1;}
            }
            else{
                matrice_comp[1][2] = Math.abs(diff)+1;
                matrice_comp[2][1] = (float)1/(Math.abs(diff)+1);
            }

            total1 = matrice_comp[0][0] + matrice_comp[1][0] + matrice_comp[2][0];
            total2 = matrice_comp[0][1] + matrice_comp[1][1] + matrice_comp[2][1];
            total3 = matrice_comp[0][2] + matrice_comp[1][2] + matrice_comp[2][2];

            avg_ofr1 = ( (matrice_comp[0][0])/total1 + (matrice_comp[0][1])/total2 + (matrice_comp[0][2])/total3 ) /3;
            avg_ofr2 = ( (matrice_comp[1][0])/total1 + (matrice_comp[1][1])/total2 + (matrice_comp[1][2])/total3 ) /3;
            avg_ofr3 = ( (matrice_comp[2][0])/total1 + (matrice_comp[2][1])/total2 + (matrice_comp[2][2])/total3 ) /3;

            if(i==0){
                val_ofr_act1[0][3] = format_nbr.format(avg_ofr1);
                val_ofr_act1[1][3] = format_nbr.format(avg_ofr2);
                val_ofr_act1[2][3] = format_nbr.format(avg_ofr3);

            }
            else if(i==1){
                val_ofr_act2[0][3] = format_nbr.format(avg_ofr1);
                val_ofr_act2[1][3] = format_nbr.format(avg_ofr2);
                val_ofr_act2[2][3] = format_nbr.format(avg_ofr3);
            }
            else if(i==2){
                val_ofr_act3[0][3] = format_nbr.format(avg_ofr1);
                val_ofr_act3[1][3] = format_nbr.format(avg_ofr2);
                val_ofr_act3[2][3] = format_nbr.format(avg_ofr3);
            }
            else if(i==3){
                val_ofr_act4[0][3] = format_nbr.format(avg_ofr1);
                val_ofr_act4[1][3] = format_nbr.format(avg_ofr2);
                val_ofr_act4[2][3] = format_nbr.format(avg_ofr3);
            }

        }

        /****** fin calcul valeures finales des offres pr chaque activité selon coût *******************************/

        /****** calcul valeures finales des offres pr chaque activité selon performance *******************************/

        for (int i=0; i<3; i++){
            matrice_comp[i][i]=1;
        }

        for (int i=0; i<nbr_act;i++){
            val_ofr1 = Float.parseFloat(jTable6.getValueAt(i,1).toString().replace(',','.'));
            val_ofr2 = Float.parseFloat(jTable6.getValueAt(i,2).toString().replace(',','.'));
            val_ofr3 = Float.parseFloat(jTable6.getValueAt(i,3).toString().replace(',','.'));

            diff = val_ofr1 - val_ofr2;
            if (diff >= 0){
                matrice_comp[0][1] = (float)1/(diff+1);
                matrice_comp[1][0] =  diff+1;
                if (diff==0) { matrice_comp[1][0] = 1; matrice_comp[0][1] = 1;}
            }
            else{
                matrice_comp[0][1] = Math.abs(diff)+1;
                matrice_comp[1][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr1 - val_ofr3;
            if (diff >= 0){
                matrice_comp[0][2] = (float)1/(diff+1);
                matrice_comp[2][0] = diff+1;
                if (diff==0) { matrice_comp[0][2] = 1; matrice_comp[2][0] = 1;}
            }
            else{
                matrice_comp[0][2] = Math.abs(diff)+1;
                matrice_comp[2][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr2 - val_ofr3;
            if (diff >= 0){
                matrice_comp[1][2] = (float)1/(diff+1);
                matrice_comp[2][1] =  diff+1;
                if (diff==0) { matrice_comp[1][2] = 1; matrice_comp[2][1] = 1;}
            }
            else{
                matrice_comp[1][2] = Math.abs(diff)+1;
                matrice_comp[2][1] = (float)1/(Math.abs(diff)+1);
            }

            total1 = matrice_comp[0][0] + matrice_comp[1][0] + matrice_comp[2][0];
            total2 = matrice_comp[0][1] + matrice_comp[1][1] + matrice_comp[2][1];
            total3 = matrice_comp[0][2] + matrice_comp[1][2] + matrice_comp[2][2];

            avg_ofr1 = ( (matrice_comp[0][0])/total1 + (matrice_comp[0][1])/total2 + (matrice_comp[0][2])/total3 ) /3;
            avg_ofr2 = ( (matrice_comp[1][0])/total1 + (matrice_comp[1][1])/total2 + (matrice_comp[1][2])/total3 ) /3;
            avg_ofr3 = ( (matrice_comp[2][0])/total1 + (matrice_comp[2][1])/total2 + (matrice_comp[2][2])/total3 ) /3;

            if(i==0){
                val_ofr_act1[0][4] = format_nbr.format(avg_ofr1);
                val_ofr_act1[1][4] = format_nbr.format(avg_ofr2);
                val_ofr_act1[2][4] = format_nbr.format(avg_ofr3);
            }
            else if(i==1){
                val_ofr_act2[0][4] = format_nbr.format(avg_ofr1);
                val_ofr_act2[1][4] = format_nbr.format(avg_ofr2);
                val_ofr_act2[2][4] = format_nbr.format(avg_ofr3);
            }
            else if(i==2){
                val_ofr_act3[0][4] = format_nbr.format(avg_ofr1);
                val_ofr_act3[1][4] = format_nbr.format(avg_ofr2);
                val_ofr_act3[2][4] = format_nbr.format(avg_ofr3);
            }
            else if(i==3){
                val_ofr_act4[0][4] = format_nbr.format(avg_ofr1);
                val_ofr_act4[1][4] = format_nbr.format(avg_ofr2);
                val_ofr_act4[2][4] = format_nbr.format(avg_ofr3);
            }

        }

        /****** fin calcul valeures finales des offres pr chaque activité selon performance *******************************/

        /****calculer les valeurs finales des offres Cloud selon chaque Activité pour le critère de sécurité **********************************/

        for (int i=0; i<nbr_act;i++){

            for (int ind=0; ind<3; ind++){
                matrice_comp[ind][ind]=1;
            }

            val_ofr1 = Float.parseFloat(jTable8.getValueAt(i,1).toString().replace(',','.'));
            val_ofr2 = Float.parseFloat(jTable8.getValueAt(i,2).toString().replace(',','.'));
            val_ofr3 = Float.parseFloat(jTable8.getValueAt(i,3).toString().replace(',','.'));

            diff = val_ofr1 - val_ofr2;
            if (diff >= 0){
                matrice_comp[0][1] = (float)1/(diff+1);
                matrice_comp[1][0] =  diff+1;
                if (diff==0) { matrice_comp[1][0] = 1; matrice_comp[0][1] = 1;}
            }
            else{
                matrice_comp[0][1] = Math.abs(diff)+1;
                matrice_comp[1][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr1 - val_ofr3;
            if (diff >= 0){
                matrice_comp[0][2] = (float)1/(diff+1);
                matrice_comp[2][0] = diff+1;
                if (diff==0) { matrice_comp[0][2] = 1; matrice_comp[2][0] = 1;}
            }
            else{
                matrice_comp[0][2] = Math.abs(diff)+1;
                matrice_comp[2][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr2 - val_ofr3;
            if (diff >= 0){
                matrice_comp[1][2] = (float)1/(diff+1);
                matrice_comp[2][1] =  diff+1;
                if (diff==0) { matrice_comp[1][2] = 1; matrice_comp[2][1] = 1;}
            }
            else{
                matrice_comp[1][2] = Math.abs(diff)+1;
                matrice_comp[2][1] = (float)1/(Math.abs(diff)+1);
            }

            total1 = matrice_comp[0][0] + matrice_comp[1][0] + matrice_comp[2][0];
            total2 = matrice_comp[0][1] + matrice_comp[1][1] + matrice_comp[2][1];
            total3 = matrice_comp[0][2] + matrice_comp[1][2] + matrice_comp[2][2];

            avg_ofr1 = ( (matrice_comp[0][0])/total1 + (matrice_comp[0][1])/total2 + (matrice_comp[0][2])/total3 ) /3;
            avg_ofr2 = ( (matrice_comp[1][0])/total1 + (matrice_comp[1][1])/total2 + (matrice_comp[1][2])/total3 ) /3;
            avg_ofr3 = ( (matrice_comp[2][0])/total1 + (matrice_comp[2][1])/total2 + (matrice_comp[2][2])/total3 ) /3;

            format_nbr = new java.text.DecimalFormat("0.##");
            if (i==0){
                val_ofr_act1[0][1] = format_nbr.format(avg_ofr1);
                val_ofr_act1[1][1] = format_nbr.format(avg_ofr2);
                val_ofr_act1[2][1] = format_nbr.format(avg_ofr3);
            }
            else if(i==1){
                val_ofr_act2[0][1] = format_nbr.format(avg_ofr1);
                val_ofr_act2[1][1] = format_nbr.format(avg_ofr2);
                val_ofr_act2[2][1] = format_nbr.format(avg_ofr3);
            }
            else if (i==2){
                val_ofr_act3[0][1] = format_nbr.format(avg_ofr1);
                val_ofr_act3[1][1] = format_nbr.format(avg_ofr2);
                val_ofr_act3[2][1] = format_nbr.format(avg_ofr3);
            }
            else if (i==3){
                val_ofr_act4[0][1] = format_nbr.format(avg_ofr1);
                val_ofr_act4[1][1] = format_nbr.format(avg_ofr2);
                val_ofr_act4[2][1] = format_nbr.format(avg_ofr3);
            }
        }

        /****** fin calcul valeures finales des offres pr chaque activité selon sécurité *******************************/

        /****calculer les valeurs finales des offres Cloud selon chaque Activité pour le critère de conformité **********************************/

        for (int i=0; i<nbr_act;i++){

            for (int ind=0; ind<3; ind++){
                matrice_comp[ind][ind]=1;
            }

            val_ofr1 = Float.parseFloat(jTable4.getValueAt(i,1).toString().replace(',','.'));
            val_ofr2 = Float.parseFloat(jTable4.getValueAt(i,2).toString().replace(',','.'));
            val_ofr3 = Float.parseFloat(jTable4.getValueAt(i,3).toString().replace(',','.'));

            diff = val_ofr1 - val_ofr2;
            if (diff >= 0){
                matrice_comp[0][1] = (float)1/(diff+1);
                matrice_comp[1][0] =  diff+1;
                if (diff==0) { matrice_comp[1][0] = 1; matrice_comp[0][1] = 1;}
            }
            else{
                matrice_comp[0][1] = Math.abs(diff)+1;
                matrice_comp[1][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr1 - val_ofr3;
            if (diff >= 0){
                matrice_comp[0][2] = (float)1/(diff+1);
                matrice_comp[2][0] = diff+1;
                if (diff==0) { matrice_comp[0][2] = 1; matrice_comp[2][0] = 1;}
            }
            else{
                matrice_comp[0][2] = Math.abs(diff)+1;
                matrice_comp[2][0] = (float)1/(Math.abs(diff)+1);
            }

            diff = val_ofr2 - val_ofr3;
            if (diff >= 0){
                matrice_comp[1][2] = (float)1/(diff+1);
                matrice_comp[2][1] =  diff+1;
                if (diff==0) { matrice_comp[1][2] = 1; matrice_comp[2][1] = 1;}
            }
            else{
                matrice_comp[1][2] = Math.abs(diff)+1;
                matrice_comp[2][1] = (float)1/(Math.abs(diff)+1);
            }

            total1 = matrice_comp[0][0] + matrice_comp[1][0] + matrice_comp[2][0];
            total2 = matrice_comp[0][1] + matrice_comp[1][1] + matrice_comp[2][1];
            total3 = matrice_comp[0][2] + matrice_comp[1][2] + matrice_comp[2][2];

            avg_ofr1 = ( (matrice_comp[0][0])/total1 + (matrice_comp[0][1])/total2 + (matrice_comp[0][2])/total3 ) /3;
            avg_ofr2 = ( (matrice_comp[1][0])/total1 + (matrice_comp[1][1])/total2 + (matrice_comp[1][2])/total3 ) /3;
            avg_ofr3 = ( (matrice_comp[2][0])/total1 + (matrice_comp[2][1])/total2 + (matrice_comp[2][2])/total3 ) /3;

            format_nbr = new java.text.DecimalFormat("0.##");
            if (i==0){
                val_ofr_act1[0][2] = format_nbr.format(avg_ofr1);
                val_ofr_act1[1][2] = format_nbr.format(avg_ofr2);
                val_ofr_act1[2][2] = format_nbr.format(avg_ofr3);
            }
            else if(i==1){
                val_ofr_act2[0][2] = format_nbr.format(avg_ofr1);
                val_ofr_act2[1][2] = format_nbr.format(avg_ofr2);
                val_ofr_act2[2][2] = format_nbr.format(avg_ofr3);
            }
            else if (i==2){
                val_ofr_act3[0][2] = format_nbr.format(avg_ofr1);
                val_ofr_act3[1][2] = format_nbr.format(avg_ofr2);
                val_ofr_act3[2][2] = format_nbr.format(avg_ofr3);
            }
            else if (i==3){
                val_ofr_act4[0][2] = format_nbr.format(avg_ofr1);
                val_ofr_act4[1][2] = format_nbr.format(avg_ofr2);
                val_ofr_act4[2][2] = format_nbr.format(avg_ofr3);
            }
        }

        /****** fin calcul valeures finales des offres pr chaque activité selon conformité *******************************/

        //***** changer le titre des colonnes selon les offres séléctionnées ******
        String [] list_nom_colonnes = new String [] {"activity", list_offer1.getSelectedItem().toString(), list_offer2.getSelectedItem().toString(), list_offer3.getSelectedItem().toString()};

        model_secu_risk.setColumnIdentifiers(list_nom_colonnes);
        model_comp_risk.setColumnIdentifiers(list_nom_colonnes);
        model_table_cost.setColumnIdentifiers(list_nom_colonnes);
        model_table_runtime.setColumnIdentifiers(list_nom_colonnes);

        table_score = (DefaultTableModel) jTable3.getModel();
        table_score.setColumnIdentifiers(list_nom_colonnes);

        /******** fin changement titre des colonnes ******/

        /***********  insérer le nom des offres sélectionnées dans le tableaux des valeurs finaux *********/
        for (int i=0; i<nbr_act;i++){
            if(i==0){
                val_ofr_act1[0][0] = list_offer1.getSelectedItem().toString();
                val_ofr_act1[1][0] = list_offer2.getSelectedItem().toString();
                val_ofr_act1[2][0] = list_offer3.getSelectedItem().toString();

            }
            else if(i==1){
                val_ofr_act2[0][0] = list_offer1.getSelectedItem().toString();
                val_ofr_act2[1][0] = list_offer2.getSelectedItem().toString();
                val_ofr_act2[2][0] = list_offer3.getSelectedItem().toString();
            }
            if(i==2){
                val_ofr_act3[0][0] = list_offer1.getSelectedItem().toString();
                val_ofr_act3[1][0] = list_offer2.getSelectedItem().toString();
                val_ofr_act3[2][0] = list_offer3.getSelectedItem().toString();
            }
            if(i==3){
                val_ofr_act4[0][0] = list_offer1.getSelectedItem().toString();
                val_ofr_act4[1][0] = list_offer2.getSelectedItem().toString();
                val_ofr_act4[2][0] = list_offer3.getSelectedItem().toString();
            }
        }

        m_act1 = new Modele_table(val_ofr_act1, titre_colonnes);
        m_act2 = new Modele_table(val_ofr_act2, titre_colonnes);
        m_act3 = new Modele_table(val_ofr_act3, titre_colonnes);
        m_act4 = new Modele_table(val_ofr_act4, titre_colonnes);

        // remplir le 2eme Jcombobox
        for (int i=0; i<nbr_act;i++){
            list_activity2.addItem(list_activity.getItemAt(i));
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        float score;
        
        /*******     vider le tableau à chaque changement dans la pondération des cirtères   *********/
        int y = table_score.getRowCount();
        for(int i=y;i>0;i--){
            table_score.removeRow(i-1);
        }
        /*************************************************/
        String act_name;
        int nbr_act = list_activity.getItemCount();
        // récupération des poids finaux des critères
        float c1 = Float.parseFloat(jTable1.getValueAt(0,1).toString().replace(',','.'));
        float c2 = Float.parseFloat(jTable1.getValueAt(1,1).toString().replace(',','.'));
        float c3 = Float.parseFloat(jTable1.getValueAt(2,1).toString().replace(',','.'));
        float c4 = Float.parseFloat(jTable1.getValueAt(3,1).toString().replace(',','.'));

        float v1, v2, v3, v4;
        int k=1;

        // remplir les noms des activités dans la table des scores
        for (int i=0; i<nbr_act; i++){
            table_score.addRow(new String[]{"","","",""});
            act_name = list_activity.getItemAt(i);
            table_score.setValueAt((act_name), i,0);
        }

        // calculer et remplire les scores des offres pour chaque activité
        for (int i=0; i<nbr_act; i++){
            if(i==0){
                for(int j=0; j<3; j++){

                    v1 = Float.parseFloat(val_ofr_act1[j][1].toString().replace(',', '.'));
                    v2 = Float.parseFloat(val_ofr_act1[j][2].toString().replace(',', '.'));
                    v3 = Float.parseFloat(val_ofr_act1[j][3].toString().replace(',', '.'));
                    v4 = Float.parseFloat(val_ofr_act1[j][4].toString().replace(',', '.'));

                    score = v1 * c1 + v2 * c2 + v3 * c3 + v4 * c4 ;
                    table_score.setValueAt(format_nbr.format(score), 0,k);
                    k++;
                }
                k=1;
            }
            else if(i==1){
                for(int j=0; j<3; j++){

                    v1 = Float.parseFloat(val_ofr_act2[j][1].toString().replace(',', '.'));
                    v2 = Float.parseFloat(val_ofr_act2[j][2].toString().replace(',', '.'));
                    v3 = Float.parseFloat(val_ofr_act2[j][3].toString().replace(',', '.'));
                    v4 = Float.parseFloat(val_ofr_act2[j][4].toString().replace(',', '.'));

                    score = v1 * c1 + v2 * c2 + v3 * c3 + v4 * c4 ;
                    table_score.setValueAt(format_nbr.format(score), 1,k);
                    k++;
                }
                k=1;
            }
            else if(i==2){
                for(int j=0; j<3; j++){

                    v1 = Float.parseFloat(val_ofr_act3[j][1].toString().replace(',', '.'));
                    v2 = Float.parseFloat(val_ofr_act3[j][2].toString().replace(',', '.'));
                    v3 = Float.parseFloat(val_ofr_act3[j][3].toString().replace(',', '.'));
                    v4 = Float.parseFloat(val_ofr_act3[j][4].toString().replace(',', '.'));

                    score = v1 * c1 + v2 * c2 + v3 * c3 + v4 * c4 ;
                    table_score.setValueAt(format_nbr.format(score), 2,k);
                    k++;
                }
                k=1;
            }
            else if(i==3){
                for(int j=0; j<3; j++){

                    v1 = Float.parseFloat(val_ofr_act4[j][1].toString().replace(',', '.'));
                    v2 = Float.parseFloat(val_ofr_act4[j][2].toString().replace(',', '.'));
                    v3 = Float.parseFloat(val_ofr_act4[j][3].toString().replace(',', '.'));
                    v4 = Float.parseFloat(val_ofr_act4[j][4].toString().replace(',', '.'));

                    score = v1 * c1 + v2 * c2 + v3 * c3 + v4 * c4 ;
                    table_score.setValueAt(format_nbr.format(score), 3,k);
                    k++;
                }
                k=1;
            }

        }
        // Changer la couleur des cellules contenant le meilleur score pour chaque activité
        jTable3.setDefaultRenderer(Object.class, new jTableRender());

    }//GEN-LAST:event_jButton1ActionPerformed

    private void generate_prioritiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_prioritiesActionPerformed
        RowHeaderExample frame = new RowHeaderExample();

        int w_sec = Integer.valueOf(priority_security.getSelectedItem().toString());
        int w_comp = Integer.valueOf(priority_compliance.getSelectedItem().toString());
        int w_cost = Integer.valueOf(priority_cost.getSelectedItem().toString());
        int w_perf = Integer.valueOf(priority_performance.getSelectedItem().toString());

        // comparison of security and compliance
        int diff = w_sec - w_comp;
        if (diff >= 0){
            dm.setValueAt(diff+1, 0, 1);
            dm.setValueAt(1+"/"+(diff+1), 1, 0);
            if (diff==0) { dm.setValueAt(1, 1, 0);}

        }
        else{
            dm.setValueAt(1+"/"+(Math.abs(diff)+1), 0, 1);
            dm.setValueAt(Math.abs(diff)+1, 1, 0);
        }
        // comparison of security and cost
        diff = w_sec - w_cost;
        if (diff >= 0){
            dm.setValueAt(diff+1, 0, 2);
            dm.setValueAt(1+"/"+(diff+1), 2, 0);
            if (diff==0) { dm.setValueAt(1, 2, 0);}
        }
        else{
            dm.setValueAt(1+"/"+(Math.abs(diff)+1), 0, 2);
            dm.setValueAt(Math.abs(diff)+1, 2, 0);
        }
        // comparison of security and perf
        diff = w_sec - w_perf;
        if (diff >= 0){
            dm.setValueAt(diff+1, 0, 3);
            dm.setValueAt(1+"/"+(diff+1), 3, 0);
            if (diff==0) { dm.setValueAt(1, 3, 0);}
        }
        else{
            dm.setValueAt(1+"/"+(Math.abs(diff)+1), 0, 3);
            dm.setValueAt(Math.abs(diff)+1, 3, 0);
        }
        // comparison of compliance and cost
        diff = w_comp - w_cost;
        if (diff >= 0){
            dm.setValueAt(diff+1, 1, 2);
            dm.setValueAt(1+"/"+(diff+1), 2, 1);
            if (diff==0) { dm.setValueAt(1, 2, 1);}
        }
        else{
            dm.setValueAt(1+"/"+(Math.abs(diff)+1), 1, 2);
            dm.setValueAt(Math.abs(diff)+1, 2, 1);
        }
        // comparison of compliance and perf
        diff = w_comp - w_perf;
        if (diff >= 0){
            dm.setValueAt(diff+1, 1, 3);
            dm.setValueAt(1+"/"+(diff+1), 3, 1);
            if (diff==0) { dm.setValueAt(1, 3, 1);}
        }
        else{
            dm.setValueAt(1+"/"+(Math.abs(diff)+1), 1, 3);
            dm.setValueAt(Math.abs(diff)+1, 3, 1);
        }
        // comparison of cost and performance
        diff = w_cost - w_perf;
        if (diff >= 0){
            dm.setValueAt(diff+1, 2, 3);
            dm.setValueAt(1+"/"+(diff+1), 3, 2);
            if (diff==0) { dm.setValueAt(1, 3, 2);}
        }
        else{
            dm.setValueAt(1+"/"+(Math.abs(diff)+1), 2, 3);
            dm.setValueAt(Math.abs(diff)+1, 3, 2);
        }

        // fill in the diagonal with 1
        for (int i=0; i<table.getRowCount();i++){
            {
                dm.setValueAt(1, i, i);
            }
        }
        // ending fiil in diagonal

        bouton_criteria.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {

                frame.setVisible(false);

                float total_sec;
                float total_comp;
                float total_cost;
                float total_perf;

                total_sec = transform_float(dm.getValueAt(0, 0).toString()) +  transform_float(dm.getValueAt(1, 0).toString())
                + transform_float(dm.getValueAt(2, 0).toString())  + transform_float(dm.getValueAt(3, 0).toString());

                total_comp = transform_float(dm.getValueAt(0, 1).toString()) +  transform_float(dm.getValueAt(1, 1).toString())
                + transform_float(dm.getValueAt(2, 1).toString())  + transform_float(dm.getValueAt(3, 1).toString());

                total_cost = transform_float(dm.getValueAt(0, 2).toString()) +  transform_float(dm.getValueAt(1, 2).toString())
                + transform_float(dm.getValueAt(2, 2).toString())  + transform_float(dm.getValueAt(3, 2).toString());

                total_perf = transform_float(dm.getValueAt(0, 3).toString()) +  transform_float(dm.getValueAt(1, 3).toString())
                + transform_float(dm.getValueAt(2, 3).toString())  + transform_float(dm.getValueAt(3, 3).toString());

                float tableau[][] = new float[4][4];
                float final_weight_sec, final_weight_comp, final_weight_cost, final_weight_perf;
                tableau [0][0] = transform_float(dm.getValueAt(1,0).toString());

                table_model_final_weights = (DefaultTableModel) jTable1.getModel();

                for (int z=0; z < tableau.length; z++){
                    for (int y=0; y < tableau.length; y++){
                        if(y==0){       tableau[z][y] = (float)transform_float(dm.getValueAt(z, y).toString()) / total_sec; }
                        if(y==1){       tableau[z][y] = (float)transform_float(dm.getValueAt(z, y).toString()) / total_comp; }
                        if(y==2){       tableau[z][y] = (float)transform_float(dm.getValueAt(z, y).toString()) / total_cost; }
                        if(y==3){       tableau[z][y] = (float)transform_float(dm.getValueAt(z, y).toString()) / total_perf; }

                    }
                }

                final_weight_sec = (float)(tableau [0][0] + tableau [0][1] + tableau[0][2] + tableau [0][3] ) / 4 ;
                final_weight_comp = (float)(tableau [1][0] + tableau [1][1] + tableau[1][2] + tableau [1][3] ) / 4 ;
                final_weight_cost = (float)(tableau [2][0] + tableau [2][1] + tableau[2][2] + tableau [2][3] ) / 4 ;
                final_weight_perf = (float)(tableau [3][0] + tableau [3][1] + tableau[3][2] + tableau [3][3] ) / 4 ;

                DecimalFormat format_nbr = new java.text.DecimalFormat("0.##");

                // remplir le tableau des critères et leurs poids finaux

                table_model_final_weights.setValueAt("Security", 0, 0);
                table_model_final_weights.setValueAt("Compliance", 1, 0);
                table_model_final_weights.setValueAt("Cost", 2, 0);
                table_model_final_weights.setValueAt("Performance", 3, 0);

                table_model_final_weights.setValueAt(format_nbr.format(final_weight_sec), 0, 1);
                table_model_final_weights.setValueAt(format_nbr.format(final_weight_comp), 1, 1);
                table_model_final_weights.setValueAt(format_nbr.format(final_weight_cost), 2, 1);
                table_model_final_weights.setValueAt(format_nbr.format(final_weight_perf), 3, 1);

                //****************************

                /*
                table_model_final_weights.setValueAt(final_weight_sec, 0, 1);
                table_model_final_weights.setValueAt(final_weight_comp, 1, 1);
                table_model_final_weights.setValueAt(final_weight_cost, 2, 1);
                table_model_final_weights.setValueAt(final_weight_perf, 3, 1);
                */

                /*
                for (int m=0; m<table.getRowCount(); m++){
                    for (int n=0; n<table.getRowCount(); n++){
                        System.out.println(dm.getValueAt(m, n)+"    ");
                    }
                }
                */
            }
        });

        frame.setLocation(300, 400);
        frame.setSize(600, 170);

        frame.setVisible(true);
    }//GEN-LAST:event_generate_prioritiesActionPerformed

    private void validate_requirementsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validate_requirementsActionPerformed

        // transformer les exigences de sécurité en 0 et 1 (1 si la le type de sécurité est coché et 0 sinon)
        int rq_confi, rq_integ, rq_avail, rq_non_repud, rq_authen;
        String activity_name = list_activity.getSelectedItem().toString();

        boolean req_confi = confidentiality.isSelected();
        if (req_confi==true) { rq_confi = 1;  } else { rq_confi=0;}

        boolean req_integ = integrity.isSelected();
        if (req_integ==true) { rq_integ = 1;  } else { rq_integ=0;}

        boolean req_avail = availability.isSelected();
        if (req_avail==true) { rq_avail = 1;  } else { rq_avail=0;}

        boolean req_non_repud = non_repudiation.isSelected();
        if (req_non_repud==true) { rq_non_repud = 1;  } else { rq_non_repud=0;}

        boolean req_authen = authenticity.isSelected();
        if (req_authen==true) { rq_authen = 1;  } else { rq_authen=0;}

        // déduire les menaces auxquelles sont exposées les activités à partir des exigences **********
        int data_breaches=0, insufficient_identity=0, insecure_interfaces=0, system_vulnerabilities=0, account_hijacking=0,
        malicious_insiders=0, persisted_threats=0, data_loss=0, insufficient_diligence=0, abuse_nefarious_use=0, denial_service=0, shared_technology=0;
        if (rq_confi==1){
            data_breaches=1;  insufficient_identity=1;
            insecure_interfaces=1;  system_vulnerabilities=1;
            account_hijacking=1;    malicious_insiders=1;
            persisted_threats=1;
            insufficient_diligence=1;     shared_technology=1;
        }
        if (rq_integ==1){
            insufficient_identity=1;   insecure_interfaces=1;
            account_hijacking=1;    malicious_insiders=1;
            persisted_threats=1;
            insufficient_diligence=1;    shared_technology=1;
        }
        if (rq_avail==1){
            insufficient_identity=1;
            insecure_interfaces=1;  system_vulnerabilities=1;
            account_hijacking=1;    malicious_insiders=1;
            persisted_threats=1;    data_loss=1;
            insufficient_diligence=1;    abuse_nefarious_use=1;
            denial_service=1;  shared_technology=1;
        }
        if (rq_non_repud==1){
            insufficient_identity=1;    account_hijacking=1;
            data_loss=1;      insufficient_diligence=1;
        }
        if (rq_authen==1){
            insufficient_identity=1;   insecure_interfaces=1;
            account_hijacking=1;    insufficient_diligence=1;
        }
        //********************

        Connection connexion = null;
        try {
            connexion = DriverManager.getConnection( url, utilisateur, motDePasse );
            /* Création de l'objet gérant les requêtes */
            System.out.println("exécution du bloc try");

            Statement statement = connexion.createStatement();
            /* Exécution d'une requête d'écriture */

            /* enregister les exigences de sécurité dans la table Activity */
            statement.executeUpdate( "INSERT INTO activity (name, confidentiality, integrity, availability, non_repudiation, authenticity, data_breaches, insufficient_identity, insecure_interfaces, system_vulnerabilities, account_hijacking, malicious_insiders, persisted_threats, data_loss, insufficient_diligence, abuse_nefarious_use, denial_service, shared_technology ) "
                + "VALUES ('"+activity_name+"', '"+rq_confi+"', '"+rq_integ+"', '"+rq_avail+"', '"+rq_non_repud+"', '"+rq_authen+"', '"+data_breaches+"', '"+insufficient_identity+"', '"+insecure_interfaces+"', '"+system_vulnerabilities+"', '"+account_hijacking+"', '"+malicious_insiders+"', '"+persisted_threats+"', '"+data_loss+"', '"+insufficient_diligence+"', '"+abuse_nefarious_use+"', '"+denial_service+"', '"+shared_technology+"');" );

            /* enregister les exigences de conformité dans la table required_rule */
            int nbr_selected_rule = model_list_rule.getSize();
            for (int i=0; i<nbr_selected_rule; i++){
                String required_rule = model_list_rule.getElementAt(i);
                System.out.println("rquireddddddddddd"+required_rule);
                statement.executeUpdate( "INSERT INTO required_rule (activity_name, rule_name) VALUES ('"+activity_name+"', '"+required_rule+"');" );
            }

            /* enregister les exigences de coût et de performance */
            float cost_offer1 = Float.valueOf(cost1.getText());
            float cost_offer2 = Float.valueOf(cost2.getText());
            float cost_offer3 = Float.valueOf(cost3.getText());

            float runtime_offer1 = Float.valueOf(runtime1.getText());
            float runtime_offer2 = Float.valueOf(runtime2.getText());
            float runtime_offer3 = Float.valueOf(runtime3.getText());

            String selected_offer1 = list_offer1.getSelectedItem().toString();
            String selected_offer2 = list_offer2.getSelectedItem().toString();
            String selected_offer3 = list_offer3.getSelectedItem().toString();

            statement.executeUpdate( "INSERT INTO estimation_activity (activity_name, offer_name, cost, runtime) VALUES ('"+activity_name+"', '"+selected_offer1+"', '"+cost_offer1+"', '"+runtime_offer1+"');" );
            statement.executeUpdate( "INSERT INTO estimation_activity (activity_name, offer_name, cost, runtime) VALUES ('"+activity_name+"', '"+selected_offer2+"', '"+cost_offer2+"', '"+runtime_offer2+"');" );
            statement.executeUpdate( "INSERT INTO estimation_activity (activity_name, offer_name, cost, runtime) VALUES ('"+activity_name+"', '"+selected_offer3+"', '"+cost_offer3+"', '"+runtime_offer3+"');" );

        } catch ( SQLException e ) {
            /* Gérer les éventuelles erreurs ici */
            System.out.println("exception catch");
            e.printStackTrace();

        }
    }//GEN-LAST:event_validate_requirementsActionPerformed

    private void list_activityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_activityActionPerformed

    }//GEN-LAST:event_list_activityActionPerformed

    private void list_activityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_activityMouseClicked

    }//GEN-LAST:event_list_activityMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        list_activity.addItem(activity_name.getText());
        list_activity.setSelectedItem(activity_name.getText());
        activity_name.setText("");
        activity_name.requestFocusInWindow();

        confidentiality.setSelected(false); integrity.setSelected(false); availability.setSelected(false); non_repudiation.setSelected(false); authenticity.setSelected(false);
        model_list_rule.removeAllElements();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void authenticityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authenticityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authenticityActionPerformed

    private void non_repudiationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_non_repudiationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_non_repudiationActionPerformed

    private void availabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availabilityActionPerformed

    private void integrityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integrityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_integrityActionPerformed

    private void confidentialityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confidentialityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confidentialityActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String rule = list_rule.getSelectedItem().toString();
        model_list_rule.addElement(rule);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void list_ruleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_ruleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list_ruleActionPerformed

    private void cost3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cost3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cost3ActionPerformed

    private void cost2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cost2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cost2ActionPerformed

    private void cost1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cost1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cost1ActionPerformed

    private void list_offer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_offer1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list_offer1ActionPerformed

    public float transform_float (String s){
        if (s.length() == 3) {
          int v1 = Integer.parseInt(String.valueOf(s.charAt(0)));
          int v2 = Integer.parseInt(String.valueOf(s.charAt(2)));
          return ((float) v1 / v2) ;
        }
        else {
            return Float.parseFloat(s);
        }
    }
    
    
 
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new configuration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activity_name;
    private javax.swing.JCheckBox authenticity;
    private javax.swing.JCheckBox availability;
    public javax.swing.JCheckBox confidentiality;
    private javax.swing.JTextField cost1;
    private javax.swing.JTextField cost2;
    private javax.swing.JTextField cost3;
    private javax.swing.JTextField file_name;
    private javax.swing.JButton generate_priorities;
    private javax.swing.JCheckBox integrity;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JComboBox<String> list_activity;
    private javax.swing.JComboBox<String> list_activity2;
    private javax.swing.JComboBox<String> list_offer1;
    private javax.swing.JComboBox<String> list_offer2;
    private javax.swing.JComboBox<String> list_offer3;
    private javax.swing.JComboBox<String> list_rule;
    private javax.swing.JComboBox<String> list_rule1;
    private javax.swing.JCheckBox non_repudiation;
    private javax.swing.JComboBox<String> priority_compliance;
    private javax.swing.JComboBox<String> priority_cost;
    private javax.swing.JComboBox<String> priority_performance;
    private javax.swing.JComboBox<String> priority_security;
    private javax.swing.JTextField runtime1;
    private javax.swing.JTextField runtime2;
    private javax.swing.JTextField runtime3;
    private javax.swing.JList<String> selected_rule;
    private javax.swing.JList<String> selected_rule1;
    private javax.swing.JButton validate_requirements;
    // End of variables declaration//GEN-END:variables

   
}
